#Rules of Probability 
1. Addition Rule 
def prob_a_or_b(a, b, all_possible_outcomes):
  # probability of event a
  prob_a = len(a) / len(all_possible_outcomes)

  # probability of event b
  prob_b = len(b) / len(all_possible_outcomes)

  # intersection of events a and b
  inter = a.intersection(b)

  # probability of intersection of events a and b
  prob_inter = len(inter) / len(all_possible_outcomes)

  # add return statement here
  return prob_a + prob_b - prob_inter

# rolling a die once and getting an even number or an odd number
evens = {2, 4, 6}
odds = {1, 3, 5}
all_possible_rolls = {1, 2, 3, 4, 5, 6}

# call function here first
print(prob_a_or_b(evens, odds, all_possible_rolls))

# rolling a die once and getting an odd number or a number greater than 2
odds = {1, 3, 5}
greater_than_two = {3, 4, 5, 6}
all_possible_rolls = {1, 2, 3, 4, 5, 6}

#call function here second
print(prob_a_or_b(odds, greater_than_two, all_possible_rolls))

# selecting a diamond card or a face card from a standard deck of cards
diamond_cards = {'ace_diamond', '2_diamond', '3_diamond', '4_diamond', '5_diamond', '6_diamond', '7_diamond',
                 '8_diamond', '9_diamond', '10_diamond', 'jack_diamond', 'queen_diamond', 'king_diamond'}
face_cards = {'jack_diamond', 'jack_spade', 'jack_heart', 'jack_club', 'queen_diamond', 'queen_spade', 'queen_heart',
              'queen_club', 'king_diamond', 'king_spade', 'king_heart', 'king_club'}
# all cards in a deck representing the entire sample space
all_possible_cards = {'ace_diamond', '2_diamond', '3_diamond', '4_diamond', '5_diamond', '6_diamond', '7_diamond',
                      '8_diamond', '9_diamond', '10_diamond', 'jack_diamond', 'queen_diamond', 'king_diamond',
                      'ace_heart', '2_heart', '3_heart', '4_heart', '5_heart', '6_heart', '7_heart', '8_heart',
                      '9_heart', '10_heart', 'jack_heart', 'queen_heart', 'king_heart', 'ace_spade', '2_spade',
                      '3_spade', '4_spade', '5_spade', '6_spade', '7_spade', '8_spade', '9_spade', '10_spade',
                      'jack_spade', 'queen_spade', 'king_spade', 'ace_club', '2_club', '3_club', '4_club', '5_club',
                      '6_club', '7_club', '8_club', '9_club', '10_club', 'jack_club', 'queen_club', 'king_club'}

# call function here third
print(prob_a_or_b(diamond_cards, face_cards, all_possible_cards))

2.Calculate Probabilities using Python
import scipy.stats as stats

# value of interest
# change this
x = 3

# sample size
# change this
n = 10

# calculate probability
prob_1 = stats.binom.pmf(x, n, 0.5)
print(prob_1)

## Question 2
prob_2 = stats.binom.pmf(7, 20, 0.5)
print(prob_2)


3.Probability mass Function over a Range uisng Python
import scipy.stats as stats

##Checkpoint 1
prob_1 = stats.binom.pmf(4, n=10, p=.5) + stats.binom.pmf(5, n=10, p=.5) + stats.binom.pmf(6, n=10, p=.5)
print(prob_1)


#Checkpoint 2
prob_2 = 1 - (stats.binom.pmf(0, n=10, p=.5) + stats.binom.pmf(1, n=10, p=.5) + stats.binom.pmf(2, n=10, p=.5))
print(prob_2)


4.Using the Cumulative Distribution Function in Python
import scipy.stats as stats

## Checkpoint 1
prob_1 = stats.binom.cdf(3, n=10, p=.5)
print(prob_1)

# compare to pmf code
print(stats.binom.pmf(0, n=10, p=.5) + stats.binom.pmf(1, n=10, p=.5) + stats.binom.pmf(2, n=10, p=.5) + stats.binom.pmf(3, n=10, p=.5))


## Checkpoint 2
prob_2 = 1 - stats.binom.cdf(5, n=10, p=.5) 
print(prob_2)


## Checkpoint 3
prob_3 = stats.binom.cdf(5, n=10, p=.5) - stats.binom.cdf(1, n=10, p=.5) 
print(prob_3)

# compare to pmf code
print(stats.binom.pmf(2, n=10, p=.5) + stats.binom.pmf(3, n=10, p=.5) + stats.binom.pmf(4, n=10, p=.5) + stats.binom.pmf(5, n=10, p=.5))

5.Probability Density Functions
import scipy.stats as stats

prob = stats.norm.cdf(175, 167.64, 8) 
print(prob)

6.Probability Density Functions and Cumulative Distribution Functions
import scipy.stats as stats

## Checkpoint 1
temp_prob_1 = stats.norm.cdf(25, 20, 3) - stats.norm.cdf(18, 20, 3)
print(temp_prob_1)


## Checkpoint 2
temp_prob_2 = 1 - stats.norm.cdf(24, 20, 3)
print(temp_prob_2)



